#include <iostream>
#include <queue>
using namespace std;

int N = 0;
int max = 16;
int arr[16][16] = { 0 };

void bfs(pair<int, int> nstart, pair<int, int> nend) {




}
int main() {
	//파이프 끝 위치
		pair<int, int> start = make_pair(1, 1);
		pair<int, int> end = make_pair(1, 2);
		queue<int,int> q;

		cin >> N;

	//행열 입력 받기
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j < N; j++) {
			cin >> arr[i][j];
		}	
	}

		q.push(start);
		q.push(end);
		
		

	while (!q.empty()) {
	
		pair<int,int> currentStart = q.front();
		q.pop();

		pair<int, int> currentEnd = q.front();
		q.pop();

		int x1 = currentStart.first;
		int y1 = currentEnd.second;

		int x2 = currentEnd.first;
		int y2 = currentEnd.second;

		
		//가로로 놓여있으면
		if (x1 == x2) {
			pair<int,int> nx1 = make_pair(x1, y1 + 1);
			pair<int, int> ny1 = make_pair(x2, y2 + 1);
			bfs(nx1, ny1);

			pair<int, int> nx2 = make_pair(x1, y1 + 1);
			pair<int, int> ny2 = make_pair(x2 + 1, y2 + 1);
			bfs(nx2, ny2);

		}
		//세로로 놓여있으면
		else if (y1 == y2) {
			pair<int, int> nx3 = make_pair(x1 + 1 , y1 );
			pair<int, int> ny3 = make_pair(x2 + 1 , y2);
			bfs(nx3, ny3);

			pair<int, int> nx4 = make_pair(x1 + 1, y1);
			pair<int, int> ny4 = make_pair(x2 + 1, y2);
			bfs(nx4, ny4);


		
		}
		//대각선으로 놓여있으면
		else {
		
		
		
		}
	}





}
